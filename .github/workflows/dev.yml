---
name: Development

on:
  workflow_dispatch:
    inputs:
      task:
        description: 'Development task to run'
        required: true
        type: choice
        options:
          - 'setup'
          - 'lint'
          - 'generate'
          - 'ci'
          - 'version-validate'
          - 'version-report'
        default: 'ci'
      verbose:
        description: 'Enable verbose output'
        required: false
        type: boolean
        default: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  dev-task:
    name: Development Task - ${{ github.event.inputs.task }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "latest"
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          if [[ "${{ github.event.inputs.task }}" == "setup" ]]; then
            poetry install --with=docs,lint
          else
            poetry install
          fi

      - name: Run Dagger Task
        run: |
          VERBOSE_FLAG=""
          if [[ "${{ github.event.inputs.verbose }}" == "true" ]]; then
            VERBOSE_FLAG="--verbose"
          fi

          case "${{ github.event.inputs.task }}" in
            "setup")
              poetry run dagger-pipeline setup $VERBOSE_FLAG
              ;;
            "lint")
              poetry run dagger-pipeline lint $VERBOSE_FLAG
              ;;
            "generate")
              poetry run dagger-pipeline generate $VERBOSE_FLAG
              ;;
            "ci")
              poetry run dagger-pipeline ci $VERBOSE_FLAG
              ;;
            "version-validate")
              poetry run dagger-pipeline version validate $VERBOSE_FLAG
              ;;
            "version-report")
              poetry run dagger-pipeline version report $VERBOSE_FLAG
              ;;
            *)
              echo "Unknown task: ${{ github.event.inputs.task }}"
              exit 1
              ;;
          esac

      - name: Upload artifacts
        if: contains(fromJson('["generate", "ci"]'), github.event.inputs.task)
        uses: actions/upload-artifact@v4
        with:
          name: dev-${{ github.event.inputs.task }}-${{ github.run_number }}
          path: manifests/
          retention-days: 7
