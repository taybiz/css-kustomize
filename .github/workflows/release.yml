---
name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      tag: ${{ steps.extract.outputs.tag }}
    steps:
      - name: Extract version from tag
        id: extract
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi

          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid tag format: $TAG"
            echo "Expected format: vX.Y.Z or vX.Y.Z-prerelease"
            exit 1
          fi

          VERSION="${TAG#v}"
          echo "✅ Tag format is valid: $TAG"
          echo "✅ Version extracted: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install

      - name: Run Dagger CI Pipeline
        run: poetry run dagger-pipeline ci --verbose

      - name: Validate version consistency
        run: poetry run dagger-pipeline version validate --verbose

      - name: Generate version report
        run: poetry run dagger-pipeline version report --verbose

      - name: Create release archive
        run: |
          mkdir -p release-artifacts

          # Copy manifests and configurations
          cp -r manifests/ release-artifacts/
          cp -r base/ release-artifacts/
          cp -r overlays/ release-artifacts/
          cp -r components/ release-artifacts/

          # Copy documentation
          cp README.md LICENSE release-artifacts/

          # Create version info file
          cat > release-artifacts/VERSION_INFO.md << EOF
          # CSS Kustomize Release ${{ needs.validate-release.outputs.tag }}

          **Version:** ${{ needs.validate-release.outputs.version }}
          **Release Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Git Commit:** ${{ github.sha }}

          ## Usage

          \`\`\`bash
          # Apply manifests directly
          kubectl apply -f manifests/with-pvc.yaml

          # Or use with Kustomize
          kubectl apply -k overlays/with-pvc/
          \`\`\`
          EOF

          # Create archives
          tar -czf css-kustomize-${{ needs.validate-release.outputs.version }}.tar.gz -C release-artifacts .
          cd release-artifacts && zip -r ../css-kustomize-${{ needs.validate-release.outputs.version }}.zip . && cd ..

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: |
            css-kustomize-${{ needs.validate-release.outputs.version }}.tar.gz
            css-kustomize-${{ needs.validate-release.outputs.version }}.zip
          retention-days: 90

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: CSS Kustomize ${{ needs.validate-release.outputs.tag }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' || contains(needs.validate-release.outputs.version, '-') }}
          files: |
            css-kustomize-${{ needs.validate-release.outputs.version }}.tar.gz
            css-kustomize-${{ needs.validate-release.outputs.version }}.zip
          generate_release_notes: true

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-github-release]
    if: vars.LOCAL_DEV != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with=docs

      - name: Build documentation
        run: poetry run mkdocs build --strict

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true
          commit_message: "docs: update for release ${{ needs.validate-release.outputs.tag }}"
